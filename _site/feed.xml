<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Radiodan Blog</title>
		<description>An (experimental) homebrew, flexible, open source, IP radio</description>
		<link>http://radiodan.github.io</link>
		<atom:link href="http://radiodan.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>About us</title>
				<description>&lt;p&gt;Dan, Andrew and Libby at BBC R&amp;amp;D are the main people working on Radiodan at the moment, with Dan 
focused on the core Radiodan code, Andrew working on the physical interface and example app, and 
Libby doing rough prototypes, testing and docs. Contact Libby in the first instance for help - by 
Twitter is best - &lt;a href=&quot;http://twitter.com/libbymiller&quot;&gt;@libbymiller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A bit more about us:&lt;/p&gt;

&lt;p&gt;Andrew Nicolaou &lt;a href=&quot;http://twitter.com/andrewn&quot;&gt;@andrewn&lt;/a&gt; is a User Interface Developer for BBC R&amp;amp;D. He&amp;#39;s interested in prototyping future 
connected experiences across TV, radio and online, particularly using emerging web technologies 
and tangible interfaces. Previously, he built audience-facing applications for BBC Online&amp;#39;s 
largest digital products. He has an MSc in System Design for Internet Applications.&lt;/p&gt;

&lt;p&gt;Daniel Nuttall &lt;a href=&quot;http://twitter.com/pixelblend&quot;&gt;@pixelblend&lt;/a&gt; is a Software engineer for Internet Research and Future Services in BBC R&amp;amp;D. He has 
worked for a range of companies in Europe and Africa, building web sites, browser extensions, 
servers and everything in between using open-source software.&lt;/p&gt;

&lt;p&gt;Libby Miller &lt;a href=&quot;http://twitter.com/libbymiller&quot;&gt;@libbymiller&lt;/a&gt; is a producer and developer at the BBC, working on open APIs for connected devices. 
She used to work at failed online TV startup Joost, and before that on FOAF and Semantic Web query 
languages at the University of Bristol. She&amp;#39;s got a PhD in Economics, for all the use that is.&lt;/p&gt;

&lt;p&gt;Many others have helped and participated so far, from inside and outside the BBC, including but 
not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.chrislowis.co.uk&quot;&gt;Chris Lowis&lt;/a&gt;: team radiodan but now sadly left BBC R&amp;amp;D and busy at &lt;a href=&quot;https://www.futurelearn.com/&quot;&gt;FutureLearn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jasminecox.co.uk&quot;&gt;Jasmine Cox&lt;/a&gt;, &lt;a href=&quot;http://cefn.com&quot;&gt;Cefn Hoile&lt;/a&gt;, Tom Nixon: electronics help, and in the case of Cefn and Jasmine (and Andrew too), for organising the &lt;a href=&quot;http://planb.nicecupoftea.org/2013/04/16/archers-avoider/&quot;&gt;workshop that inadvertently caused this project to happen&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jarkman.co.uk&quot;&gt;Richard Sewell&lt;/a&gt;, Anton Bowers and others at the &lt;a href=&quot;http://bristol.hackspace.org.uk&quot;&gt;Bristol Hackspace&lt;/a&gt; for many interesting discussions and &lt;a href=&quot;http://www.flickr.com/photos/nicecupoftea/9158910612/in/set-72157634373882934&quot;&gt;wrong radios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neil Ferguson of &lt;a href=&quot;http://www.bristoldesignforge.co.uk/&quot;&gt;Bristol Design Forge&lt;/a&gt; for much patience with the &lt;a href=&quot;https://github.com/radiodan/project/blob/master/docs/box_design.markdown&quot;&gt;initial box design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aelius.com/njh/&quot;&gt;Nick Humpfrey&lt;/a&gt;, Andrew Wood, Tim Broom and our other colleagues at the BBC for tons of help and support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wrongradios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Participants at the XML SummerSchool 2013 for their &lt;a href=&quot;http://www.flickr.com/photos/nicecupoftea/sets/72157635614084675/&quot;&gt;wrongradio ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Colleagues in the MediaScape project for their &lt;a href=&quot;http://www.flickr.com/photos/nicecupoftea/sets/72157636086946563/&quot;&gt;wrongradio ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gilest and Barney for their &lt;a href=&quot;http://www.flickr.com/photos/nicecupoftea/sets/72157639547859034/&quot;&gt;wrongradio ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And for inspiration whether they knew it or not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mxlab.squarespace.com/mxlab/the-geek-appealing-of-a-lego-radio-device&quot;&gt;Samuel Vuillermoz of mxlabs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linkedin.com/in/vickybuser&quot;&gt;Vicky Buser&lt;/a&gt;, &lt;a href=&quot;http://blog.whatfettle.com&quot;&gt;Paul Downey&lt;/a&gt;, &lt;a href=&quot;http://www.sixpack.fr/en/blog/russell-maurice-is-my-co-pilot&quot;&gt;Russell Maurice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 08 Jan 2014 11:06:18 +0000</pubDate>
				<link>http://radiodan.github.io//2014/01/08/about-us.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2014/01/08/about-us.html</guid>
			</item>
		
			<item>
				<title>Release</title>
				<description>&lt;p&gt;Radiodan is ready for release. Well, like any release, I feel like it&amp;#39;s 
not ready - but sometimes you just have to get it out of the door, even if it&amp;#39;s Christmas eve.&lt;/p&gt;

&lt;p&gt;Thanks to Andrew&amp;#39;s work on the &lt;a href=&quot;https://github.com/radiodan/radiodan_example&quot;&gt;radiodan example 
app&lt;/a&gt; and &lt;a href=&quot;https://github.com/radiodan/radiodan_example_physical_interface&quot;&gt;physical 
interface&lt;/a&gt;, 
and Dan&amp;#39;s work on the &lt;a href=&quot;https://github.com/radiodan/radiodan&quot;&gt;Radiodan core 
library&lt;/a&gt; you can now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;download a &lt;a href=&quot;http://dev.notu.be/2013/12/radiodan/radiodan2.zip&quot;&gt;2G SD&lt;/a&gt; (580 MB zipped) minimal Raspian-plus-Radiodan card image&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://elinux.org/RPi_Easy_SD_Card_Setup&quot;&gt;put it on an SD card in the usual way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or - try the experimental &lt;a href=&quot;http://dev.notu.be/2013/12/radiodan/NOOBS_v1_3_2-radiodan-only.zip&quot;&gt;Radiodan-only NOOBS installation&lt;/a&gt; (360MB zipped) and drag and drop it onto a formated SD card&lt;/li&gt;
&lt;li&gt;put the card in the Pi, add Ethernet and a speaker, and plug it in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;listen to BBC radio, controlled via &lt;a href=&quot;http://radiodan.local:3000&quot;&gt;web page&lt;/a&gt; as long as you are on the same network&lt;/li&gt;
&lt;li&gt;avoid tracks and programmes&lt;/li&gt;
&lt;li&gt;optionally you can also add some &lt;a href=&quot;https://github.com/radiodan/radiodan_example_physical_interface/blob/master/doc/wiring.png&quot;&gt;buttons and dials&lt;/a&gt; and &lt;a href=&quot;https://github.com/radiodan/project/blob/master/docs/box_design.markdown&quot;&gt;a box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to make it wifi enabled:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;plug a USB wifi with RT5370 chipset, into your Pi and reboot&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/radiodan/cold_start/issues/5&quot;&gt;optionally: make a cup of tea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;connect to its wifi (&amp;quot;radiodan_configuration&amp;quot;)&lt;/li&gt;
&lt;li&gt;go to any webpage (or wait for the captive portal, if you are on a Mac) and tell it your wifi password&lt;/li&gt;
&lt;li&gt;reboot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More detailed step by step instructions are 
&lt;a href=&quot;https://github.com/radiodan/project/blob/master/docs/getting_started.markdown&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be warned that is alpha software. However, if anyone does try it, we&amp;#39;d 
really like to hear any comments you have, good or bad, and I&amp;#39;ll be 
around on &lt;a href=&quot;https://twitter.com/libbymiller&quot;&gt;@libbymiller&lt;/a&gt; or 
libby@nicecupoftea.org if you have any questions.&lt;/p&gt;

&lt;p&gt;We&amp;#39;d like to thank Nick Humfrey for all his help with the metadata 
aspects of it.&lt;/p&gt;

&lt;p&gt;Our experience writing this has given us ideas about how to do it 
better, so in the next few months there will be a Radiodan 2 with a 
slightly different architecture and probably using the excellent 
&lt;a href=&quot;http://www.raspberrypi.org/archives/4100&quot;&gt;NOOBS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As ever, we are working in public - you can see all our code &lt;a href=&quot;https://github.com/radiodan&quot;&gt;on 
github&lt;/a&gt;, and there are various documents 
&lt;a href=&quot;http://radiodan.github.io&quot;&gt;on this blog&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Tue, 24 Dec 2013 10:49:47 +0000</pubDate>
				<link>http://radiodan.github.io//2013/12/24/release.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/12/24/release.html</guid>
			</item>
		
			<item>
				<title>Postcard Analysis</title>
				<description>&lt;p&gt;This post is written by &lt;a href=&quot;http://www.bbc.co.uk/rd/people/andrew-wood&quot;&gt;Andrew Wood&lt;/a&gt;, who is a designer at IRFS in &lt;a href=&quot;http://www.bbc.co.uk/rd/&quot;&gt;BBC R&amp;amp;D&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Myself and Tim Broom spent some time this week analysing the RadioDan postcards. Our aim was to 
document all the ideas from the previous two workshops in Oxford and San Sebasti√°n.&lt;/p&gt;

&lt;p&gt;Libby&amp;#39;s &lt;a href=&quot;http://www.flickr.com/groups/2386878@N23/&quot;&gt;Flickr documentation&lt;a/&gt; also proved valuable as most photos contained a synopsis of each idea.&lt;/p&gt;

&lt;p&gt;We mapped the ideas across 2 axes:
&lt;ul&gt;
&lt;li&gt;Popularity was measured on the Vertical Axes with the most popular ideas at the top.&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;Feasibility was measured horizontally with the most feasible ideas placed to the left.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Using good old post-its we captured the idea and judged where it should be placed on the axes. 
If the idea came up again the post-it received a dot ‚Äì increasing its popularity and thus moving 
it up the vertical / popularity axes.&lt;/p&gt;

&lt;p&gt;Having captured so many great ideas we now had a wall full of post-its ‚Äì To make better sense of 
this information we grouped the ideas into common themes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/Radiodan_workshop_mapping.pdf&quot;&quot;&gt;&lt;img src=&quot;/assets/Radiodan_workshop_mapping.png&quot; width=&quot;500&quot; alt=&quot;Wrongradio workshop mapping results&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(click to download the pdf)&lt;/p&gt;

&lt;p&gt;The themes captured so far are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embracing / Rejecting Content&lt;/li&gt;
&lt;li&gt;    Who am I&lt;/li&gt;
&lt;li&gt;    Favourites&lt;/li&gt;
&lt;li&gt;    Balance Controls&lt;/li&gt;
&lt;li&gt;    Time Shifting&lt;/li&gt;
&lt;li&gt;    Ambience&lt;/li&gt;
&lt;li&gt;    Content Visualisation&lt;/li&gt;
&lt;li&gt;    Emotional Controls&lt;/li&gt;
&lt;li&gt;    Recommendations&lt;/li&gt;
&lt;li&gt;    Context&lt;/li&gt;
&lt;li&gt;    Social&lt;/li&gt;
&lt;li&gt;    Multiple Device Experience&lt;/li&gt;
&lt;li&gt;    Playlists&lt;/li&gt;
&lt;li&gt;    Notifications &amp; Alerts&lt;/li&gt;
&lt;li&gt;    Instant News&lt;/li&gt;
&lt;li&gt;    Control Features&lt;/li&gt;
&lt;li&gt;    Non BBC Content&lt;/li&gt;
&lt;li&gt;    Everything With Me&lt;/li&gt;
&lt;li&gt;    Programmepedia&lt;/li&gt;
&lt;li&gt;    Mood&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our next step through group discussion is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;    Refine / cluster more ideas &amp; themes not captured. &lt;/li&gt;

&lt;li&gt;    Get a more comprehensive technical view on the feasibility axes, and alter our map accordingly.&lt;/li&gt;

&lt;li&gt;    Compare our analysis with previously gathered themes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would also be useful to capture the favourite ideas and find the gems that may be worthy of 
further exploration.&lt;/p&gt;
</description>
				<pubDate>Thu, 14 Nov 2013 15:06:23 +0000</pubDate>
				<link>http://radiodan.github.io//2013/11/14/postcard-analysis.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/11/14/postcard-analysis.html</guid>
			</item>
		
			<item>
				<title>Postcards and stickers</title>
				<description>&lt;p&gt;I had a very interesting conversation at &lt;a href=&quot;http://bristol.hackspace.org.uk&quot;&gt;Bristol Hackspace&lt;/a&gt; a 
couple of months ago. I was trying to explain what on earth I was trying to do and why. The 
&lt;a href=&quot;http://planb.nicecupoftea.org/2013/04/16/archers-avoider/&quot;&gt;Archers Avoider&lt;/a&gt; makes it easier 
than usual for me to explain what I do - often when I get asked I start thinking about it and 
then I&amp;#39;m not sure what on earth I am doing, and plunge into a confused and rambling description 
of the lots of stuff that I do at work. The Archers Avoider is easy to explain (&amp;quot;you press the 
button and it avoids the Archers&amp;quot;) and sparked a conversation with Richard, Anton and Ian 
started about the kinds of radios that they would like to see and I started drawing boxes and 
circles in a notepad.&lt;/p&gt;

&lt;p&gt;I really like this way of working. You end up with a fluid back-and-forth about what it would 
do, and there&amp;#39;s something about having a picture that conveys what you are talking about in an 
engaging manner with an immediacy that&amp;#39;s lacking in a written description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/wrong_radio1.jpg&quot; &quot;A wrong radio&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know why it works so well - these are scribbles really. &lt;a href=&quot;https://twitter.com/psd&quot;&gt;@psd&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/evalottchen&quot;&gt;@evalottchen&lt;/a&gt; do beautiful and engaging pictures but these 
are much more primitive. But it&amp;#39;s clear that for some reason drawing things is a good way of 
getting people to think about the ideas they have, and it seems like an excellent way of coming 
up with requirements for Radiodan. At this stage, the more features the better. I&amp;#39;ve been 
listening to &lt;a href=&quot;http://www.bbc.co.uk/podcasts/series/iots/all&quot;&gt;In Our Time Science archive&lt;/a&gt; a lot 
recently, and I want a kind of &lt;a href=&quot;http://en.wikipedia.org/wiki/Cambrian_explosion&quot;&gt;Cambrian 
Explosion&lt;/a&gt; of ideas for radios 
(&lt;a href=&quot;http://downloads.bbc.co.uk/podcasts/radio4/iots/iots_20050217-0900a.mp3&quot;&gt;mp3&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Various conversations with Richard at the Hackspace and AndrewN of team Radiodan suggested that 
some people would be less keen on drawing these things themselves, and that some sort of a 
template would be useful. So we made some simple postcards and stickers at Moo.&lt;/p&gt;

&lt;p&gt;I then tried out the process at the &lt;a href=&quot;http://xmlsummerschool.com&quot;&gt;XML Summer School&lt;/a&gt;. I was 
amazed at how well it went, and how enthusiastic people were about it, and at the lovely ideas 
that people came up with. You can see most of them in the &lt;a href=&quot;http://www.flickr.com/groups/2386878@N23/&quot;&gt;Flickr 
pool&lt;/a&gt;. Here&amp;#39;s one of my favourites:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/robin.jpg&quot; &quot;Robin's radio&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Robin / Philip: always filter this out; mute when phone rings; fast forward button; dammit I missed that; kill button on a remote and then a backup one in case you don&amp;#39;t make it there in time.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;and another:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/matt.jpg&quot; &quot;Matt's radio&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Matt: hit the button and you get something from In Our Time on the subject (there probably is something!)&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;and another:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/psd.jpg&quot; &quot;Paul's radio&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Paul said: &amp;quot;My radio is mostly fine - my only interaction is when John Humphries comes on - so this allows you to give him a stroke when he&amp;#39;s nice but give him an electric shock when e.g. he talks about science&amp;quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve since run a similar event at the MediaScape project kickoff meeting, with equally 
interesting results.&lt;/p&gt;

&lt;p&gt;This is the basic process that I&amp;#39;ve used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduce the problem with devices - I explain that radios are relatively inflexible, hard to change, and that its difficult to experiment with their behaviour or appearance&lt;/li&gt;
&lt;li&gt;Explain about Radiodan and the possibilities we have now of creating new prototypes easily and quickly&lt;/li&gt;
&lt;li&gt;Present some examples - with pictures - of possible radios, how things could be made better or or more interesting &lt;/li&gt;
&lt;li&gt;Ask them to draw what is is they are interested in - &amp;quot;what would your wrong radio do?&amp;quot; with postcards and stickers, in small groups or on their own&lt;/li&gt;
&lt;li&gt;Ask them to present their results back to the group, document them using photos and text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In practice, people usually get the idea without much introduction at all (I&amp;#39;ve tried it in the 
pub and it works perfectly well :-)&lt;/p&gt;

&lt;p&gt;The main idea is to give people some ideas and tools, get them enthused and interested, let them 
talk about their ideas, listen to them, and ensure they get credit. And somehow, in a way 
mysterious to me...it works. It&amp;#39;s fun and produces lots of interesting ideas.&lt;/p&gt;

&lt;p&gt;I hope that we can run more of these sessions and for different kinds of devices. We&amp;#39;re at the 
stage now of starting to work out what we do with this information. It&amp;#39;s not clear to me if we 
should look for regularities - or outliers - or both. We&amp;#39;re getting some help from some user 
experience experts in the BBC on how best to do this, which is great.&lt;/p&gt;

&lt;p&gt;For now, here are some clusters of interesting areas, things that keep coming up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;skip a programme or person or track or commercial&lt;/li&gt;
&lt;li&gt;learn what I like with like / hate buttons&lt;/li&gt;
&lt;li&gt;play to my mood (for music)&lt;/li&gt;
&lt;li&gt;popular / against the crowd (for music)&lt;/li&gt;
&lt;li&gt;I want to know more in depth about a topic&lt;/li&gt;
&lt;li&gt;muting / louder when detects things like cooking noises, kettle on, phone, conversation, speech vs music&lt;/li&gt;
&lt;li&gt;rewind a bit - just missed something&lt;/li&gt;
&lt;li&gt;what was that song (specifically)? who played that version? email it / tweet it to me&lt;/li&gt;
&lt;li&gt;integrate podcasts / my music, especially related to what I&amp;#39;ve been listening to&lt;/li&gt;
&lt;li&gt;feed back to the studio in visceral ways&lt;/li&gt;
&lt;li&gt;interact with it via speech / audio&lt;/li&gt;
&lt;li&gt;randomise&lt;/li&gt;
&lt;li&gt;listen again&lt;/li&gt;
&lt;li&gt;radio 4 + 1&lt;/li&gt;
&lt;li&gt;&amp;quot;no-touch&amp;quot; perfect radio&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 25 Oct 2013 18:07:07 +0100</pubDate>
				<link>http://radiodan.github.io//2013/10/25/postcards-and-stickers.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/10/25/postcards-and-stickers.html</guid>
			</item>
		
			<item>
				<title>Sprint end</title>
				<description>&lt;p&gt;Our two-week sprint on Radiodan ended last week. We didn&amp;#39;t really get as far as we&amp;#39;d hoped, though that was 
partly us getting to understand the sort of velocity we have doing these kinds of projects. Which is to say, 
compared with pure software, things seem to take a looong time.&lt;/p&gt;

&lt;p&gt;However we have done a bunch of interesting things, and particularly with respect to wifi configuration, Andrew and Chris have a very nice workflow going, which you can see in action in &lt;a href=&quot;(http://vimeo.com/73633646&quot;&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our original approach was this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the radiodan can&amp;#39;t find a wifi network it knows about&lt;/li&gt;
&lt;li&gt;create a point to point network&lt;/li&gt;
&lt;li&gt;use your laptop or phone to connect to that network&lt;/li&gt;
&lt;li&gt;go to any webpage on that device. You should be edirected to a config page for the radiodan&lt;/li&gt;
&lt;li&gt;enter the network details&lt;/li&gt;
&lt;li&gt;click to reboot the radiodan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What Andrew and Chris discovered was that this solution was not very robust - quite often the network didn&amp;#39;t seem to be created, and when it was, it was hard to connect to and often didn&amp;#39;t work.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s hard to know what exactly the problem was - at work there are a very large number of wifi networks, for 
example, so that may have been at least part of the issue.&lt;/p&gt;

&lt;p&gt;After discussing the issue with TomN and others, Andrew developed a better solution - which is that you turn the 
Pi into a wifi router. This makes for a more robust network to connect to (usually), although it has the 
disadvantage that you can&amp;#39;t both scan for networks and be an access point - so the code scans first and then 
becomes an access point, lengthening startup time. Andrew also implemented the nice &amp;#39;captive portal&amp;#39; feature of 
the kind you get in hotels and similar, where as soon as you connect to the network a web page pops up requesting 
information.&lt;/p&gt;

&lt;p&gt;Dan and I spent a lot of last week preparing for our nextrad.io presentation, which was a distraction in some 
ways, but also helped us get our thoughts in order about the overall goals of the project - essentially - make it 
easy for us and then others to quickly prototype the behaviours and appearance of connected radios. The 
conference was good fun too - it was very nice to meet and hear from people in the wider radio industry. 
Nextrad.io video all their presentations so when it&amp;#39;s ready we&amp;#39;ll link to it here - the slides don&amp;#39;t mean much on 
their own as they are mostly pictures.&lt;/p&gt;

&lt;p&gt;For the presentation, Dan put together this (very funny I think) &lt;a href=&quot;https://vimeo.com/73576108&quot;&gt;12 second video of the Archers 
Avoider&lt;/a&gt;, which you should definitely watch. Radiodan is not the same as the Archers 
Avoider though, but just one of many applications of it.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve also been preaparing for my class at the &lt;a href=&quot;http://xmlsummerschool.com/curriculum-2013/trends-and-transients-2013/&quot;&gt;XML Summer School next 
week&lt;/a&gt;, talking about 
&lt;a href=&quot;https://github.com/libbymiller/radio-democracy&quot;&gt;radio-democracy&lt;/a&gt; and the experimental and partial implmentation of &lt;a href=&quot;http://www.bbc.co.uk/blogs/researchanddevelopment/2011/02/universal-control.shtml&quot;&gt;BBC R&amp;amp;D&amp;#39;s Universal 
Control API&lt;/a&gt; in it.&lt;/p&gt;

&lt;p&gt;This week Dan also created a non-physical web-only application of Radiodan (a erm, rApp?) using 
Twillio, which is a web API interface to SMS and calling. His request show rApp allows you to 
send an SMS and request an artist or song from his audio collection, which will then be queued 
up and play (on his machine). This necessitated various improvements to the Radiodan code 
including lays nothing ok; improved notifications, searching for music, adding music without 
using mpc.&lt;/p&gt;

&lt;p&gt;Andrew and I experimented with an interrupt-based hardware interfaces - we created an event 
machine version - but the interupt needs making into a proper bit of code.&lt;/p&gt;
</description>
				<pubDate>Fri, 13 Sep 2013 11:44:44 +0100</pubDate>
				<link>http://radiodan.github.io//2013/09/13/sprint-end.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/09/13/sprint-end.html</guid>
			</item>
		
			<item>
				<title>Sprint</title>
				<description>&lt;p&gt;As mentioned in our &lt;a href=&quot;http://www.bbc.co.uk/rd/blog/2013/08/irfs-weeknotes-155&quot;&gt;IRFS 
weeknotes&lt;/a&gt; 
we&amp;#39;re half way through a two week sprint on Radiodan within IRFS in BBC 
R&amp;amp;D. Radiodan is a possible platform we might be able to use in some 
upcoming work on an EU project called Mediascape, and we have 
a long-standing interests as a team in new forms of radio and 
&lt;a href=&quot;http://radiodns.org&quot;&gt;RadioDNS&lt;/a&gt; and related technolgies, many of which 
could be prototyped using Radiodan.&lt;/p&gt;

&lt;p&gt;The idea of the sprint is to stablise the &lt;a href=&quot;https://github.com/pixelblend/radiodan&quot;&gt;Radiodan 
gem&lt;/a&gt; so that other people inside 
and outside the BBC can pick it up and use it. This includes being able 
to quickly get started with it on a RaspberryPi with a button. Dan and I 
are also lucky enough to be doing a short talk at 
&lt;a href=&quot;http://nextrad.io&quot;&gt;nextrad.io&lt;/a&gt; in early September, so we&amp;#39;ve been 
thinking a lot about that too.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what we&amp;#39;ve been doing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving the installation on a RaspberryPi, including handling wifi connectivity &lt;a href=&quot;https://radiodan.github.io/2013/08/07/networking.html&quot;&gt;as outlined here&lt;/a&gt;. When you connect to the generated network it automatically pops up a web browser window for you to pick the newtrok you want to connect to. It can be a little slow but it&amp;#39;s very nice.&lt;/li&gt;
&lt;li&gt;Improving the Radiodan gem so it&amp;#39;s easy(ier) to create new types of radio on top of it, including some bugfixes and a few requirements arising from &lt;a href=&quot;https://github.com/libbymiller/radio-democracy&quot;&gt;radio-democracy&lt;/a&gt; to do with playing MP3s&lt;/li&gt;
&lt;li&gt;Improving the button handling code so it will be easier to add new hardware components and so that it doesn&amp;#39;t use 100% of CPU (as my original code did). This has been a voyage of discovery and a source of huge annoyance for Andrew.&lt;/li&gt;
&lt;li&gt;Investigating a messaging architecture to solve some of the messy threading issues&lt;/li&gt;
&lt;li&gt;Confirming that it&amp;#39;s ok to use the BBC&amp;#39;s shoutcast streams. The proviso is that they shouldn&amp;#39;t be relied on in the long-term or for support &lt;/li&gt;
&lt;li&gt;Taking lots of pictures and video - some of the pictures &lt;a href=&quot;http://www.flickr.com/photos/nicecupoftea/sets/72157635298583038/&quot;&gt;are here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Preparing for our nextrad.io presentation on 9th September&lt;/li&gt;
&lt;li&gt;Battling rubbish SD cards and our own partial understanding of electronics (thanks TomN!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s early days still but there&amp;#39;s now a working demoable avoider in the 
office at least, and we&amp;#39;re feeling like we can start to build more 
applications on top of it.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll leave you with a picture from our presentation - some wrong radios:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/wrong_radios.jpg&quot; some drawings of wrong radios&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 30 Aug 2013 19:23:23 +0100</pubDate>
				<link>http://radiodan.github.io//2013/08/30/sprint.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/08/30/sprint.html</guid>
			</item>
		
			<item>
				<title>Radiodan cheatsheet</title>
				<description>&lt;p&gt;I&amp;#39;ve been working with Radiodan to make a radio that plays whatever is most popular on BBC radio. Dan&amp;#39;s been 
helping me understand how best to use the Radiodan features. Here&amp;#39;s the results of our initial discussions.&lt;/p&gt;

&lt;h2&gt;Radiodan&lt;/h2&gt;

&lt;p&gt;Radiodan is a Ruby library containing four main elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;player lib/radiodan/&lt;/li&gt;
&lt;li&gt;builder lib/radiodan/middleware&lt;/li&gt;
&lt;li&gt;event binding &lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Player&lt;/h2&gt;

&lt;p&gt;This is currently a wrapper (&amp;#39;adapter&amp;#39;) for the MPD player so you can only create an MPD player instance, but 
others could be made (i.e. an iTunes wrapper) as long as they support play, pause, and add to playlist: it&amp;#39;s a 
wrapper for the software that actually plays the audio. To create a player, see Builder below.&lt;/p&gt;

&lt;p&gt;The main part of Player is Playlist, which is what you tell the player about to tell it what to play. The Playlist 
consists of a state [:play, :stop, :pause], a mode [:sequential, :resume, :random], repeat (default false), an 
array of tracks, which themselves contain a file / url, a position (default 0), seek (default 0) and volume 
(default 100%).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;radio4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Radiodan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Playlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A Playlist is also sent back by the Player at regular intervals (currently every 0.5 sec). Radiodan checks the 
playlist it sent against the playlist it gets back, and changes the state of the player if they are inconsistent. 
So for example if state from MPD is :stop when the Playlist sent to it was :play, then radiodan sends a play 
command to MPD.&lt;/p&gt;

&lt;p&gt;Example playlist returned:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;Radiodan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Playlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1fb95b8&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@tracks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;Radiodan::Track:0x1fb2808&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#@attributes=&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://....&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;BBC Radio 4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pos&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@seek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;073&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To change the channel, you simply send it a new Playlist. Similarly for MP3s. MP3 will typically contain more 
metadata than streams in general. To access items of metadata from the Playlist, use e.g. player.playlist[&amp;quot;Name&amp;quot;].&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Builder&lt;/h2&gt;

&lt;p&gt;Builder is about creating and running ad-hoc components for the system, the &amp;#39;middleware&amp;#39;. To use it you create a class of your own with a &amp;#39;call&amp;#39; function. This function must be wrapped in a event machine block or it will block. You can see some existing examples of middleware in the radiodan Gem in lib/radiodan/middleware/ - e.g. panic.rb. Radiodan loops through all of these it knows about in order, calling the call function and passing it an instance of Player. &lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example of how to start Radiodan with a builder, and you can see the logger, adapter for MPD, the initial playlist and then two pieces of middleware, touch_file and panic.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Radiodan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;      &lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:MPD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6600&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playlist&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radio4&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;      &lt;span class=&quot;ss&quot;&gt;:touch_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tmp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;      &lt;span class=&quot;ss&quot;&gt;:panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:playlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radio1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Event Binding&lt;/h2&gt;

&lt;p&gt;Any part of the system can register an event with a key and a block to call when the event is triggered, like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_event&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:panic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;panic!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To trigger an event, do this with the key used earlier, and any value to pass to the block: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger_event&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:panic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;[Note: We are considering adding an :all event which captures all events and which can be passed to the web interface via Faye.]&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Logger&lt;/h2&gt;

&lt;p&gt;Logging is fairly self-explanatory. To create a logger, pass it to the builder as above. To use it, do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;panicing!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see the complete example in &lt;a href=&quot;https://github.com/radiodan/radiodan_example/blob/master/bin/start&quot;&gt;radiodan_example&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 08 Aug 2013 10:41:34 +0100</pubDate>
				<link>http://radiodan.github.io//2013/08/08/radiodan-cheatsheet.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/08/08/radiodan-cheatsheet.html</guid>
			</item>
		
			<item>
				<title>Networking in Radiodan</title>
				<description>&lt;p&gt;There are two current areas of practical research in radiodan. The first has to do with one of the biggest 
bugbears of working with networked devices, particularly ones with no screen: getting it on the network and 
talking to it. The second is about installation and interaction: choosing the level of flexibility. This post is 
about the work on networking. I&amp;#39;ll write up the rest soon.&lt;/p&gt;

&lt;h2&gt;The problem with setup/connecting to wifi&lt;/h2&gt;

&lt;p&gt;For Raspberry Pis in general, people use them either with a screen and keyboard, getting networking information 
using the screen, or else headlessly, i.e. without a screen. This is where the problem comes. Moving the devices 
between networks means that you need to get them on the network to talk to them and for them to talk to the 
outside world, without being able to see the usual information on a screen.&lt;/p&gt;

&lt;p&gt;So for example, BBC Salford has a lovely Darlek robot made using a Raspberry Pi, which can be controlled remotely via a 
series of RESTful commands (move forward, speak etc). It has its home network programmed into it 
(probably using &lt;a href=&quot;https://wiki.archlinux.org/index.php/WPA_supplicant&quot;&gt;wpa supplicant&lt;/a&gt;, a linux networking tool that allows you to plug in and use wifi devices and 
specific which networks with passwords that they should attempt to connect to in a textfile.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/darlek.jpg&quot; width=&quot;500&quot; alt=&quot;Knitted Darlek&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Move it off a network it knows about and you have to do one of two things in order to connect it up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connect the Pi to a screen via its HDMI port and use a keyboard to enter the network information&lt;/li&gt;
&lt;li&gt;connect it up to your own computer via an ethernet connection and share your network with it and then connect to 
it over ssh to use wpa supplicant or similar to get it on a network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first of these may not be very convenient, because smallish HDMI screens may not be available. Modern TVs 
usually have HDMI sockets, but not all monitors do, and in any case you don&amp;#39;t necessarily want to carry one around 
with you. The second approach is feasible with Mac OS X (though not when the wifi network is 
certificate-protected).&lt;/p&gt;

&lt;p&gt;Once you have managed to tell the device how to get on to a network, you then may need to connect to it the next 
time you want to talk to it. For a developer working on a Pi, typically you&amp;#39;ll want to try something out and reboot it. &lt;/p&gt;

&lt;p&gt;If you are sharing your network with it, you can do this again, either finding the IP address via the console or 
nmap and sshing to it that way, or by installing Avahi on it and thereby giving it a known name so you can connect 
to it on the same network (e.g. &amp;#39;radiodan.local&amp;#39;). (Typically anything giving out IP addresses using DHCP will 
tend to give out the same one to the same device, but you can&amp;#39;t rely on that).&lt;/p&gt;

&lt;p&gt;If you have not installed Avahi on it, or if you are on a different network, you will need to find its IP address 
somehow. Again, you will need to either connect it up to a monitor and keyboard to see its IP (&amp;#39;ifconfig&amp;#39;), or use 
nmap or Mac OS X console if you&amp;#39;re on the same network / sharing; or use some sort of display connected to the 
GPIO. Or you could make it say its IP address using espeak, which is easy to do but is often hard to hear and 
remember.&lt;/p&gt;

&lt;h2&gt;Reconnecting and developing&lt;/h2&gt;

&lt;p&gt;In the development of Radiodan we always have half an eye on ease of use for future developers. We want to make it 
easy for others who don&amp;#39;t have huge amounts of time or great skills in networking on linux-like systems to get 
started. None of the current solutions is very easy. It&amp;#39;s a substantial hurdle to getting things working for 
people.&lt;/p&gt;

&lt;p&gt;Developers have two distinct problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;telling the device about the network&lt;/li&gt;
&lt;li&gt;talking to the device on the network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two problems have parallels in the consumer area too. Printers, networked web cameras and other consumer 
devices have this problem: they need to get on the network (perhaps with no easy user input device or feedback 
device) and other devices need to talk to them once they are on there. It&amp;#39;s obviously something that many 
Raspberry Pi and Arduino developers have thought about. There are also other newer devices like the Imp that try 
to solve this problem (and we&amp;#39;ll talk about those in another post).&lt;/p&gt;

&lt;h2&gt;Our solution&lt;/h2&gt;

&lt;p&gt;For now and to solve our immediate problem, we&amp;#39;ve taken a similar approach to &lt;a href=&quot;http://blog.arduino.cc/2013/05/18/welcome-arduino-yun-the-first-member-of-a-series-of-wifi-products-combining-arduino-with-linux/&quot;&gt;the Arduino 
Y√∫n&lt;/a&gt;. 
If the Radiodan doesn&amp;#39;t find a wifi network it knows about, it broadcasts its own wifi network with a known name 
and uses Avahi to enable the developer to connect to it at a known identifier via ssh. The developer can then ssh in and 
add wifi networks using wpa supplicant. In the future we plan to make it more easily configurable over a web 
interface, but for now, this greatly simplifies the issues we&amp;#39;ve been having connecting to it on various networks.&lt;/p&gt;
</description>
				<pubDate>Wed, 07 Aug 2013 11:23:03 +0100</pubDate>
				<link>http://radiodan.github.io//2013/08/07/networking.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/08/07/networking.html</guid>
			</item>
		
			<item>
				<title>Hello</title>
				<description>&lt;p&gt;Radiodan is currently a small open source &lt;a href=&quot;https://github.com/pixelblend/radiodan&quot;&gt;Ruby gem&lt;/a&gt; developed by Dan 
Nuttall that allows you to play BBC Radio Streams and other audio sources using MPD. Its usefulness lies in the 
ability to publish events which you can then subscribe to. For example, you can tell it to react to certain inputs 
(the example we used is to change stations following a button press), or tell it to emit data in response to other 
stimuli (e.g detect programme boundaries or track boundaries and send information about them).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://planb.nicecupoftea.org/2013/04/16/archers-avoider/&quot;&gt;A convergence of ideas at an internet of things hackday&lt;/a&gt; at BBC R&amp;amp;D led Sean O&amp;#39;Halpin, Jasmine Cox, 
Nikolaos Tsipas and I to create the &lt;a href=&quot;https://github.com/radiodan/project/wiki/Archers-Avoider&quot;&gt;&amp;#39;Archers Avoider&amp;#39;&lt;/a&gt; 
an application of Radiodan on a Raspberry Pi with a &amp;#39;panic&amp;#39; button to be pressed when the Archers (or other 
content you wanted to avoid) came on the radio. &lt;/p&gt;

&lt;p&gt;You may well ask - why not simply turn off the radio? or, since the BBC publishes its schedule information, the 
Archers Avoider could simply never play the Archers (or any programme you don&amp;#39;t like) again, and indeed this is 
what &lt;a href=&quot;http://www.jarkman.co.uk&quot;&gt;Richard Sewell&amp;#39;s&lt;/a&gt; concept of &amp;#39;Not This Now&amp;#39; would do:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/not_this_now.jpg&quot; width=&quot;500&quot; alt=&quot;Not This Now&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The answer lies in the way toys like these generate ideas. People listen to the radio typically while they are doing 
something else such as working, driving, cooking - and they don&amp;#39;t tend to interact with the physical radio much 
once it&amp;#39;s on - they tend not to change station for example. Making the avoider got us thinking: the fact that 
people don&amp;#39;t tend to change radio station probably masks irritation about some aspects of their listening, where 
they are not sufficiently annoyed to change channel or switch the radio off, but they are not enjoying listening. 
What, then, if they could make their own radio? What would it do? What would it look like? What if we could make a 
radio that people of some technical ability could easily adapt to what they wanted it to do?&lt;/p&gt;

&lt;p&gt;So that&amp;#39;s our current project: &lt;strong&gt;A connected, physical IP radio, which anyone with basic web-programming skills 
can adapt to make interesting applications and interfaces&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Dan Nuttall, Andrew Nicolaou, Chris Lowis and I have been working on Radiodan and applications of it in our 10% 
time at IRFS at &lt;a href=&quot;http://www.bbc.co.uk/rd/&quot;&gt;BBC R&amp;amp;D&lt;/a&gt;. I&amp;#39;ve also had some great discussions about possible 
applications of it at the Bristol Hackspace with Richard Sewell and Anton Bowers. You can see some of our code and 
experiments on &lt;a href=&quot;https://github.com/radiodan&quot;&gt;github&lt;/a&gt; and &lt;a href=&quot;http://www.flickr.com/search/?q=radiodan&quot;&gt;flickr&lt;/a&gt;, but 
we thought it would be useful to have a blog to put some notes up and give the work some structure. Please do talk 
to us if you are interested or would like to get involved.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll finish with a picture of the latest version of the avoider, beautifully laser cut by Neil from &lt;a href=&quot;http://bristoldesignforge.co.uk&quot;&gt;Bristol Design Forge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/archers_avoider_mk4.jpg&quot; width=&quot;500&quot; alt=&quot;Archers Avoider Mk4&quot;/&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 05 Aug 2013 12:21:19 +0100</pubDate>
				<link>http://radiodan.github.io//2013/08/05/hello.html</link>
				<guid isPermaLink="true">http://radiodan.github.io//2013/08/05/hello.html</guid>
			</item>
		
	</channel>
</rss>
